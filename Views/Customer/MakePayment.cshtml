@model CredWise.Models.LoanApplication
@{
    ViewData["Title"] = "Make Payment";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string loanStatusToDisplay = ViewBag.DisplayLoanStatus ?? Model?.LoanStatus ?? "N/A";
    decimal amountDueToDisplay = ViewBag.DisplayAmountDue ?? Model?.AmountDue ?? 0m;
    int overdueMonthsToDisplay = ViewBag.DisplayOverdueMonths ?? Model?.OverdueMonths ?? 0;
    decimal currentOverdueAmountToDisplay = ViewBag.DisplayCurrentOverdueAmount ?? Model?.CurrentOverdueAmount ?? 0m;
    decimal emiFromModel = Model?.EMI ?? 0m;

    bool showPaymentForm = ViewBag.ShowPaymentForm ?? (Model != null && (loanStatusToDisplay == "Active" || loanStatusToDisplay == "Overdue"));

    string paymentDisabledMessage = ViewBag.PaymentFormDisabledMessage as string;
    string noPaymentDueControllerMessage = ViewBag.NoPaymentDueMessage as string;

    string GetSummaryCardAlertText()
    {
        if (!string.IsNullOrEmpty(noPaymentDueControllerMessage))
        {
            return noPaymentDueControllerMessage;
        }
        if (Model != null && loanStatusToDisplay == "Closed")
        {
            return "No payment is due as this loan is fully paid and closed.";
        }
        if (Model != null && amountDueToDisplay <= 0 && loanStatusToDisplay != "Overdue" && loanStatusToDisplay != "Closed")
        {
            return "There is currently no amount due for this loan.";
        }
        return null;
    }
    string summaryCardAlertText = GetSummaryCardAlertText();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Customer Portal</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
          integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f9fa;
            color: #343a40;
            line-height: 1.6;
        }

        .h2.fw-bold {
            color: #2c3e50;
        }

        .payment-summary-card, .make-payment-card {
            border: none;
            border-radius: 0.85rem;
            box-shadow: 0 8px 25px rgba(0, 0, 0, .07);
            background-color: #ffffff;
            overflow: hidden;
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        }

            .payment-summary-card:hover, .make-payment-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 30px rgba(0, 0, 0, .09);
            }

        .card-header {
            background-color: #0A2463;
            color: #ffffff;
            border-bottom: none;
            font-weight: 600;
            font-size: 1.05rem;
            padding: 0.9rem 1.25rem;
            letter-spacing: 0.3px;
        }

            .card-header .fas {
                margin-right: 0.6rem;
            }

        .summary-label {
            color: #6c757d;
            font-size: 0.9rem;
        }

        .summary-value {
            font-weight: 500;
            font-size: 0.95rem;
        }

        .form-label {
            font-weight: 500;
            color: #495057;
            font-size: 0.9rem;
        }

        .form-control, .form-select {
            border-radius: 0.375rem;
            border: 1px solid #ced4da;
            padding: 0.6rem 0.8rem;
            font-size: 0.9rem;
        }

            .form-control:focus, .form-select:focus {
                border-color: #0A2463;
                box-shadow: 0 0 0 0.25rem rgba(10, 36, 99, .15);
            }

        .input-group-text {
            background-color: #e9ecef;
            border: 1px solid #ced4da;
            font-size: 0.9rem;
        }

        .stylish-button {
            padding: 0.65rem 1.5rem;
            font-weight: 500;
            border-radius: 0.375rem;
            letter-spacing: 0.3px;
            transition: all 0.2s ease-in-out;
        }

            .stylish-button .fas {
                margin-right: 0.5rem;
                transition: transform 0.2s ease-in-out;
            }

            .stylish-button:hover .fas {
                transform: scale(1.1);
            }

        #proceedToPayButton {
            background-color: #3E92CC;
            border-color: #3E92CC;
        }

            #proceedToPayButton:hover {
                background-color: #0A2463;
                border-color: #0A2463;
            }

        .form-check-label a {
            color: #3E92CC;
            text-decoration: none;
        }

            .form-check-label a:hover {
                text-decoration: underline;
                color: #0A2463;
            }

        .payment-disabled-message {
            background-color: #fff3cd;
            border: 1px solid #ffeeba;
            color: #856404;
            padding: 1rem;
            border-radius: 0.375rem;
            text-align: center;
            margin-top: 1rem;
        }

        #paymentStatusModalHeader {
            background-color: #0A2463 !important;
            color: white;
        }

        #paymentStatusCloseButton {
            background-color: #3E92CC;
            border-color: #3E92CC;
        }

            #paymentStatusCloseButton:hover {
                background-color: #0A2463;
                border-color: #0A2463;
            }

        .status-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
        }

        .text-success .status-icon {
            color: #198754;
        }

        .text-danger .status-icon {
            color: #dc3545;
        }

    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div id="page-content-wrapper" class="w-100">
            <div class="container-fluid p-4 p-md-5">
                <div class="mb-4">
                    <h1 class="h2 fw-bold">Make a Payment</h1>
                    <p class="text-muted" id="paymentPageSubtitle">
                        @if (!string.IsNullOrEmpty(noPaymentDueControllerMessage) && !showPaymentForm)
                        {
                            @noPaymentDueControllerMessage
                        }
                        else if (!showPaymentForm && !string.IsNullOrEmpty(paymentDisabledMessage))
                        {
                            @:Review your loan summary. @paymentDisabledMessage
                        }
                        else if (Model != null)
                        {
                            if (loanStatusToDisplay == "Closed")
                            {
                                @:This loan (@Model.LoanProductName - @Model.LoanNumber) is closed.
                            }
                            else if (showPaymentForm)
                            {
                                @:Securely pay your loan amount for @Model.LoanProductName (@Model.LoanNumber).
                            }
                            else
                            {
                                @:Review your loan details below.
                            }
                        }
                        else
                        {
                            @:Loan details are currently unavailable.
                        }
                    </p>
                </div>

                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
                }

                @if (Model != null)
                {
                    <div class="row">
                        <div class="col-lg-7 col-xl-6 mb-4 mb-lg-0">
                            <div class="card payment-summary-card">
                                <div class="card-header">
                                    <i class="fas fa-file-invoice-dollar me-2"></i>Payment Due Summary
                                </div>
                                <div class="card-body p-4">
                                    <h5 class="card-title" id="loanProductName">
                                        @Model.LoanProductName (@Model.LoanNumber)
                                    </h5>
                                    <p class="card-text text-muted" id="loanShortDescription">
                                        Current Status: <span class="fw-bold @(loanStatusToDisplay == "Overdue" ? "text-danger" : (loanStatusToDisplay == "Closed" ? "text-success" : (loanStatusToDisplay == "Active" ? "text-info" : "text-secondary")))">@loanStatusToDisplay</span>
                                    </p>
                                    <hr>
                                    <div class="row mb-2">
                                        <div class="col-6 summary-label">Amount Currently Due:</div>
                                        <div class="col-6 summary-value fw-bold fs-5 @(amountDueToDisplay > 0 && loanStatusToDisplay != "Closed" ? "text-danger" : "text-success")" id="amountDueDisplay">
                                            INR @amountDueToDisplay.ToString("N2")
                                        </div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-6 summary-label">Next Scheduled Due Date:</div>
                                        <div class="col-6 summary-value" id="dueDateDisplay">
                                            @(Model.NextDueDate?.ToString("MMMM d, yyyy") ?? "N/A")
                                        </div>
                                    </div>
                                    @if (loanStatusToDisplay == "Overdue")
                                    {
                                        <div class="row mb-2">
                                            <div class="col-6 summary-label text-danger">Overdue Installments:</div>
                                            <div class="col-6 summary-value text-danger" id="overdueMonthsDisplay">@overdueMonthsToDisplay</div>
                                        </div>
                                        <div class="row mb-2">
                                            <div class="col-6 summary-label text-danger">Total Overdue Amount:</div>
                                            <div class="col-6 summary-value text-danger" id="currentOverdueAmountDisplay">INR @currentOverdueAmountToDisplay.ToString("N2")</div>
                                        </div>
                                    }
                                    <div class="row">
                                        <div class="col-6 summary-label">Total Outstanding Balance:</div>
                                        <div class="col-6 summary-value" id="outstandingBalanceDisplay">INR @Model.OutstandingBalance.ToString("N2")</div>
                                    </div>

                                    <div id="paymentSuccessPageMessage" class="alert alert-success mt-3 d-none" role="alert">
                                        <i class="fas fa-check-circle me-2"></i>Payment successful! Your loan details have been updated.
                                    </div>

                                    <div id="noPaymentDuePageMessage" class="alert alert-info mt-3 @(string.IsNullOrEmpty(summaryCardAlertText) ? "d-none" : "")" role="alert">
                                        @if (!string.IsNullOrEmpty(summaryCardAlertText))
                                        {
                                            <i class="fas fa-info-circle me-2"></i> 
                                            @summaryCardAlertText
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (showPaymentForm)
                        {
                            <div class="col-lg-5 col-xl-6">
                                <div class="card make-payment-card">
                                    <div class="card-header">
                                        <i class="fas fa-credit-card me-2"></i>Payment Details
                                    </div>
                                    <div class="card-body p-4">
                                        <form id="paymentForm" asp-controller="Customer" asp-action="ProcessPayment" method="post">
                                            @Html.AntiForgeryToken() <input type="hidden" name="loanId" id="loanId" value="@Model.ApplicationId" />

                                            <div class="mb-3">
                                                <label for="paymentAmount" class="form-label">Payment Amount (INR)</label>
                                                <div class="input-group">
                                                    <span class="input-group-text">₹</span>
                                                    <input type="number" class="form-control" id="paymentAmount"
                                                           name="paidAmount" step="0.01" min="1.00"
                                                           value="@(amountDueToDisplay > 0 ? amountDueToDisplay.ToString("F2") : (emiFromModel > 0 ? emiFromModel.ToString("F2") : "100.00"))" required>
                                                </div>
                                                <div class="form-text">
                                                    @if (loanStatusToDisplay == "Overdue" && currentOverdueAmountToDisplay > 0)
                                                    {
                                                        <span class="text-danger d-block mt-1">Your loan is overdue. Suggested payment to clear dues: INR @currentOverdueAmountToDisplay.ToString("N2")</span>
                                                    }
                                                </div>
                                            </div>

                                            <div class="mb-3">
                                                <label for="paymentMethod" class="form-label">Payment Method</label>
                                                <select class="form-select" id="paymentMethod" name="paymentMethod" required>
                                                    <option value="" selected disabled>Select a payment method...</option>
                                                    <option value="UPI">UPI</option>
                                                    <option value="Net Banking">Net Banking</option>
                                                    <option value="Debit Card">Debit Card</option>
                                                    <option value="Credit Card">Credit Card</option>
                                                </select>
                                            </div>

                                            <div class="form-check mt-3 mb-3">
                                                <input class="form-check-input" type="checkbox" value="" id="termsAndConditions" required>
                                                <label class="form-check-label small" for="termsAndConditions">
                                                    I agree to the <a href="#" target="_blank">Terms and Conditions</a> of this payment.
                                                </label>
                                            </div>

                                            <button type="submit" class="btn btn-primary w-100 stylish-button" id="proceedToPayButton">
                                                <i class="fas fa-arrow-circle-right me-2"></i>@(ViewBag.PaymentButtonText ?? "Make Payment")
                                            </button>
                                            <div id="paymentProcessingLoader" class="text-center mt-2 d-none">
                                                <div class="spinner-border text-primary" role="status">
                                                    <span class="visually-hidden">Processing...</span>
                                                </div>
                                                <p>Processing payment...</p>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(paymentDisabledMessage))
                        {
                            <div class="col-lg-5 col-xl-6">
                                <div class="payment-disabled-message">
                                    <i class="fas fa-info-circle fa-2x mb-2"></i>
                                    <p class="mb-0">@paymentDisabledMessage</p>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (string.IsNullOrEmpty(noPaymentDueControllerMessage))
                {
                    <div class="alert alert-warning">Loan details could not be loaded. Please try again or contact support.</div>
                }
            </div> <div class="modal fade" id="paymentStatusModal" tabindex="-1" aria-labelledby="paymentStatusModalLabel"
                        aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header" id="paymentStatusModalHeader">
                            <h5 class="modal-title" id="paymentStatusModalLabel">Processing Payment...</h5>
                        </div>
                        <div class="modal-body text-center py-4">
                            <div id="paymentProcessingSpinnerModal" class="mb-3">
                                <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Please wait, we are securely processing your payment.</p>
                            </div>
                            <div id="paymentStatusResult" class="d-none">
                            </div>
                        </div>
                        <div class="modal-footer d-none" id="paymentStatusModalFooter">
                            <button type="button" class="btn btn-primary stylish-button" id="paymentStatusCloseButton" data-bs-dismiss="modal">
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
            integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
            crossorigin="anonymous"></script>

    <script>
        $(document).ready(function () {
            const statusModalElement = document.getElementById('paymentStatusModal');
            const statusModal = new bootstrap.Modal(statusModalElement);
            const modalHeader = $('#paymentStatusModalHeader');
            const modalLabel = $('#paymentStatusModalLabel');
            const modalSpinner = $('#paymentProcessingSpinnerModal');
            const modalResultDiv = $('#paymentStatusResult');
            const modalFooter = $('#paymentStatusModalFooter');
            const modalCloseButton = $('#paymentStatusCloseButton');

            const paymentForm = $('#paymentForm');
            const proceedButton = $('#proceedToPayButton');
            const processingLoaderInline = $('#paymentProcessingLoader');

            const amountDueDisplay = $('#amountDueDisplay');
            const dueDateDisplay = $('#dueDateDisplay');
            const outstandingBalanceDisplay = $('#outstandingBalanceDisplay');
            const loanStatusSpan = $('#loanShortDescription').find('span');
            const paymentAmountInput = $('#paymentAmount');
            const paymentSuccessPageMsg = $('#paymentSuccessPageMessage');
            const noPaymentDuePageMsgDiv = $('#noPaymentDuePageMessage');

            modalCloseButton.on('click', function (e) {
                window.location.href = '@Url.Action("CustomerDashboard", "Customer")';
            });
            paymentForm.on('submit', function (e) {
                e.preventDefault();

                if (!this.checkValidity()) {
                    e.stopPropagation();
                    $(this).addClass('was-validated');
                    return;
                }
                $(this).removeClass('was-validated');

                proceedButton.prop('disabled', true).addClass('d-none');
                processingLoaderInline.removeClass('d-none');

                modalLabel.text('Processing Payment...');
                modalHeader.removeClass('bg-success bg-danger').addClass('bg-primary text-white');
                modalSpinner.removeClass('d-none');
                modalResultDiv.addClass('d-none').html('');
                modalFooter.addClass('d-none');
                statusModal.show();

                $.ajax({
                    type: "POST",
                    url: $(this).attr('action'),
                    data: $(this).serialize(),
                    dataType: "json",
                    success: function (response) {
                        modalSpinner.addClass('d-none');
                        modalResultDiv.removeClass('d-none');
                        modalFooter.removeClass('d-none');

                        if (response.success) {
                            modalHeader.removeClass('bg-primary').addClass('bg-success text-white');
                            modalLabel.text('Payment Successful!');
                            modalResultDiv.html(
                                `<div class="text-success"><i class="fas fa-check-circle status-icon"></i></div>
                                 <p class="fs-5">${response.message || "Your payment has been processed successfully."}</p>
                                 ${response.outstandingBalance !== undefined ? `<p>New Outstanding Balance: INR ${parseFloat(response.outstandingBalance).toFixed(2)}</p>` : ''}
                                 ${response.transactionId ? `<p class="small text-muted">Transaction ID: ${response.transactionId}</p>` : ''}`
                            );
                            modalCloseButton.removeClass('btn-danger btn-primary').addClass('btn-success');

                            amountDueDisplay.text('INR ' + parseFloat(response.amountDue > 0 ? response.amountDue : 0).toFixed(2));
                            if (parseFloat(response.amountDue) > 0 && response.loanStatus !== "Closed") {
                                amountDueDisplay.removeClass('text-success').addClass('text-danger');
                            } else {
                                amountDueDisplay.removeClass('text-danger').addClass('text-success');
                            }

                            if (response.nextDueDate) {
                                dueDateDisplay.text(new Date(response.nextDueDate).toLocaleDateString('en-IN', { year: 'numeric', month: 'long', day: 'numeric' }));
                            } else {
                                dueDateDisplay.text("N/A");
                            }

                            outstandingBalanceDisplay.text('INR ' + parseFloat(response.outstandingBalance).toFixed(2));

                            loanStatusSpan.text(response.loanStatus)
                                .removeClass('text-danger text-info text-success text-secondary')
                                .addClass(response.loanStatus === "Overdue" ? "text-danger" :
                                        (response.loanStatus === "Closed" ? "text-success" :
                                        (response.loanStatus === "Active" ? "text-info" : "text-secondary")));

                            if (response.loanStatus === "Overdue" && response.overdueMonths > 0) {
                                overdueMonthsDisplay.text(response.overdueMonths);
                                currentOverdueAmountDisplay.text('INR ' + parseFloat(response.currentOverdueAmount).toFixed(2));
                                overdueDetailsRowOverdueMonths.removeClass('d-none').show();
                                overdueDetailsRowCurrentOverdueAmount.removeClass('d-none').show();
                            } else {
                                overdueMonthsDisplay.text('0');
                                currentOverdueAmountDisplay.text('INR 0.00');
                                overdueDetailsRowOverdueMonths.addClass('d-none');
                                overdueDetailsRowCurrentOverdueAmount.addClass('d-none');
                            }

                            let suggestedPaymentValue = "0.00";
                            paymentAmountFormText.find('.text-danger.d-block.mt-1').remove();

                            if (response.loanStatus === "Overdue" && response.currentOverdueAmount > 0) {
                                suggestedPaymentValue = parseFloat(response.amountDue).toFixed(2);
                                if (response.currentOverdueAmount > 0) {
                                    paymentAmountFormText.append(`<span class="text-danger d-block mt-1">Your loan is overdue. Suggested payment: INR ${parseFloat(response.amountDue).toFixed(2)} (includes INR ${parseFloat(response.currentOverdueAmount).toFixed(2)} in dues).</span>`);
                                }
                            } else if (response.loanStatus === "Active") {
                                suggestedPaymentValue = parseFloat(response.amountDue > 0 ? response.amountDue : (response.emi > 0 ? response.emi : "100.00")).toFixed(2);
                            }
                            paymentAmountInput.val(suggestedPaymentValue);

                            if (response.loanStatus === "Closed" || (response.outstandingBalance !== undefined && response.outstandingBalance <= 0 && response.amountDue <=0)) {
                                paymentForm.hide();
                                processingLoaderInline.addClass('d-none');
                                paymentSuccessPageMsg.addClass('d-none');
                                noPaymentDuePageMsgDiv.html('<i class="fas fa-info-circle me-2"></i>No payment is due as this loan is fully paid and closed.').removeClass('d-none');
                                $('#paymentPageSubtitle').text(`This loan (${$('#loanProductName').text()}) is closed.`);
                                proceedButton.addClass('d-none');
                            } else {
                                paymentForm.show();
                                paymentSuccessPageMsg.removeClass('d-none');
                                noPaymentDuePageMsgDiv.addClass('d-none');
                                $('#termsAndConditions').prop('checked', false);
                                proceedButton.prop('disabled', false).removeClass('d-none');
                                processingLoaderInline.addClass('d-none');
                            }

                        } else {
                            modalHeader.removeClass('bg-primary bg-success').addClass('bg-danger text-white');
                            modalLabel.text(response.errorType || 'Payment Failed');
                            modalResultDiv.html(
                                `<div class="text-danger"><i class="fas fa-times-circle status-icon"></i></div>
                                 <p class="fs-5">${response.message || "Your payment could not be processed."}</p>`
                            );
                            modalCloseButton.removeClass('btn-success btn-primary').addClass('btn-danger');
                            proceedButton.prop('disabled', false).removeClass('d-none');
                            processingLoaderInline.addClass('d-none');
                        }
                    },
                    error: function (xhr, status, error) {
                        modalSpinner.addClass('d-none');
                        modalResultDiv.removeClass('d-none');
                        modalFooter.removeClass('d-none');

                        modalHeader.removeClass('bg-primary').addClass('bg-danger text-white');
                        modalLabel.text('Payment Error');
                        modalResultDiv.html(
                            `<div class="text-danger"><i class="fas fa-exclamation-triangle status-icon"></i></div>
                             <p class="fs-5">An unexpected error occurred while trying to process your payment.</p>
                             <p>Please try again later or contact support if the issue persists.</p>
                             <p class="small text-muted">Error: ${xhr.status} ${error}</p>`
                        );
                        modalCloseButton.removeClass('btn-success').addClass('btn-danger');

                        proceedButton.prop('disabled', false).removeClass('d-none');
                        processingLoaderInline.addClass('d-none');
                    }
                });
            });

            $('#paymentForm input, #paymentForm select').on('input change', function () {
                if ($(this).closest('form').hasClass('was-validated')) {
                    $(this).removeClass('is-invalid is-valid');
                }
            });

            statusModalElement.addEventListener('hidden.bs.modal', function () {
                if (paymentForm.is(':visible') && !proceedButton.is(':visible') && processingLoaderInline.is(':visible')) {
                       proceedButton.prop('disabled', false).removeClass('d-none');
                       processingLoaderInline.addClass('d-none');
                }
            });
        });
    </script>
</body>
</html>